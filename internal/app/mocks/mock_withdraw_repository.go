// Code generated by MockGen. DO NOT EDIT.
// Source: gophermart/internal/app/repositories (interfaces: WithdrawRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "gophermart/internal/app/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWithdrawRepositoryInterface is a mock of WithdrawRepositoryInterface interface.
type MockWithdrawRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawRepositoryInterfaceMockRecorder
}

// MockWithdrawRepositoryInterfaceMockRecorder is the mock recorder for MockWithdrawRepositoryInterface.
type MockWithdrawRepositoryInterfaceMockRecorder struct {
	mock *MockWithdrawRepositoryInterface
}

// NewMockWithdrawRepositoryInterface creates a new mock instance.
func NewMockWithdrawRepositoryInterface(ctrl *gomock.Controller) *MockWithdrawRepositoryInterface {
	mock := &MockWithdrawRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockWithdrawRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawRepositoryInterface) EXPECT() *MockWithdrawRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetByUserID mocks base method.
func (m *MockWithdrawRepositoryInterface) GetByUserID(arg0 context.Context, arg1 int) ([]entities.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", arg0, arg1)
	ret0, _ := ret[0].([]entities.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockWithdrawRepositoryInterfaceMockRecorder) GetByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockWithdrawRepositoryInterface)(nil).GetByUserID), arg0, arg1)
}

// GetTotalWithdrawByUserID mocks base method.
func (m *MockWithdrawRepositoryInterface) GetTotalWithdrawByUserID(arg0 context.Context, arg1 int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalWithdrawByUserID", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalWithdrawByUserID indicates an expected call of GetTotalWithdrawByUserID.
func (mr *MockWithdrawRepositoryInterfaceMockRecorder) GetTotalWithdrawByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalWithdrawByUserID", reflect.TypeOf((*MockWithdrawRepositoryInterface)(nil).GetTotalWithdrawByUserID), arg0, arg1)
}

// StoreAndUpdateBalance mocks base method.
func (m *MockWithdrawRepositoryInterface) StoreAndUpdateBalance(arg0 context.Context, arg1 entities.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAndUpdateBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAndUpdateBalance indicates an expected call of StoreAndUpdateBalance.
func (mr *MockWithdrawRepositoryInterfaceMockRecorder) StoreAndUpdateBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAndUpdateBalance", reflect.TypeOf((*MockWithdrawRepositoryInterface)(nil).StoreAndUpdateBalance), arg0, arg1)
}
