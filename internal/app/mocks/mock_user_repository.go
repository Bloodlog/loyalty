// Code generated by MockGen. DO NOT EDIT.
// Source: gophermart/internal/app/repositories (interfaces: UserRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "gophermart/internal/app/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetBalanceByUserID mocks base method.
func (m *MockUserRepositoryInterface) GetBalanceByUserID(arg0 context.Context, arg1 int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByUserID", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByUserID indicates an expected call of GetBalanceByUserID.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetBalanceByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByUserID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetBalanceByUserID), arg0, arg1)
}

// GetByLogin mocks base method.
func (m *MockUserRepositoryInterface) GetByLogin(arg0 context.Context, arg1 string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", arg0, arg1)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetByLogin), arg0, arg1)
}

// IsExistByID mocks base method.
func (m *MockUserRepositoryInterface) IsExistByID(arg0 context.Context, arg1 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistByID", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistByID indicates an expected call of IsExistByID.
func (mr *MockUserRepositoryInterfaceMockRecorder) IsExistByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistByID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).IsExistByID), arg0, arg1)
}

// Store mocks base method.
func (m *MockUserRepositoryInterface) Store(arg0 context.Context, arg1 entities.User) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockUserRepositoryInterfaceMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Store), arg0, arg1)
}
