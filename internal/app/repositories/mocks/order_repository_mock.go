// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repositories/order_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "gophermart/internal/app/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
)

// MockOrderRepositoryInterface is a mock of OrderRepositoryInterface interface.
type MockOrderRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryInterfaceMockRecorder
}

// MockOrderRepositoryInterfaceMockRecorder is the mock recorder for MockOrderRepositoryInterface.
type MockOrderRepositoryInterfaceMockRecorder struct {
	mock *MockOrderRepositoryInterface
}

// NewMockOrderRepositoryInterface creates a new mock instance.
func NewMockOrderRepositoryInterface(ctrl *gomock.Controller) *MockOrderRepositoryInterface {
	mock := &MockOrderRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepositoryInterface) EXPECT() *MockOrderRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockOrderRepositoryInterface) GetByID(ctx context.Context, tx pgx.Tx, orderID int64) (*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, tx, orderID)
	ret0, _ := ret[0].(*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrderRepositoryInterfaceMockRecorder) GetByID(ctx, tx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).GetByID), ctx, tx, orderID)
}

// GetByOrderNumber mocks base method.
func (m *MockOrderRepositoryInterface) GetByOrderNumber(ctx context.Context, orderNumber int64) (*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderNumber", ctx, orderNumber)
	ret0, _ := ret[0].(*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderNumber indicates an expected call of GetByOrderNumber.
func (mr *MockOrderRepositoryInterfaceMockRecorder) GetByOrderNumber(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderNumber", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).GetByOrderNumber), ctx, orderNumber)
}

// GetByUserID mocks base method.
func (m *MockOrderRepositoryInterface) GetByUserID(ctx context.Context, userID int) ([]entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockOrderRepositoryInterfaceMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).GetByUserID), ctx, userID)
}

// GetFreshOrders mocks base method.
func (m *MockOrderRepositoryInterface) GetFreshOrders(ctx context.Context, limit int) ([]entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreshOrders", ctx, limit)
	ret0, _ := ret[0].([]entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreshOrders indicates an expected call of GetFreshOrders.
func (mr *MockOrderRepositoryInterfaceMockRecorder) GetFreshOrders(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreshOrders", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).GetFreshOrders), ctx, limit)
}

// GetTotalAccrualByUserID mocks base method.
func (m *MockOrderRepositoryInterface) GetTotalAccrualByUserID(ctx context.Context, userID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalAccrualByUserID", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalAccrualByUserID indicates an expected call of GetTotalAccrualByUserID.
func (mr *MockOrderRepositoryInterfaceMockRecorder) GetTotalAccrualByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalAccrualByUserID", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).GetTotalAccrualByUserID), ctx, userID)
}

// Store mocks base method.
func (m *MockOrderRepositoryInterface) Store(ctx context.Context, tx pgx.Tx, order *entities.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, tx, order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockOrderRepositoryInterfaceMockRecorder) Store(ctx, tx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).Store), ctx, tx, order)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepositoryInterface) UpdateOrder(ctx context.Context, tx pgx.Tx, order *entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, tx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepositoryInterfaceMockRecorder) UpdateOrder(ctx, tx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).UpdateOrder), ctx, tx, order)
}
