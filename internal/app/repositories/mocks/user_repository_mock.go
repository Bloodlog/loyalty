// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repositories/user_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "gophermart/internal/app/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetBalanceByUserID mocks base method.
func (m *MockUserRepositoryInterface) GetBalanceByUserID(ctx context.Context, tx pgx.Tx, userID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByUserID", ctx, tx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByUserID indicates an expected call of GetBalanceByUserID.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetBalanceByUserID(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByUserID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetBalanceByUserID), ctx, tx, userID)
}

// GetByLogin mocks base method.
func (m *MockUserRepositoryInterface) GetByLogin(ctx context.Context, login string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", ctx, login)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetByLogin), ctx, login)
}

// IsExistByID mocks base method.
func (m *MockUserRepositoryInterface) IsExistByID(ctx context.Context, id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistByID", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistByID indicates an expected call of IsExistByID.
func (mr *MockUserRepositoryInterfaceMockRecorder) IsExistByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistByID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).IsExistByID), ctx, id)
}

// Store mocks base method.
func (m *MockUserRepositoryInterface) Store(ctx context.Context, user entities.User) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, user)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockUserRepositoryInterfaceMockRecorder) Store(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Store), ctx, user)
}

// UpdateBalanceByUserID mocks base method.
func (m *MockUserRepositoryInterface) UpdateBalanceByUserID(ctx context.Context, tx pgx.Tx, balance float64, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceByUserID", ctx, tx, balance, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceByUserID indicates an expected call of UpdateBalanceByUserID.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateBalanceByUserID(ctx, tx, balance, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceByUserID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateBalanceByUserID), ctx, tx, balance, userID)
}
